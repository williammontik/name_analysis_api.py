# -*- coding: utf-8 -*-
import os, smtplib, logging, random, base64
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)
app.logger.setLevel(logging.DEBUG)

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

def send_email_with_chart_links(html_body, chart_images):
    try:
        msg_root = MIMEMultipart('related')
        msg_root['Subject'] = "New KataChatBot Submission"
        msg_root['From'] = SMTP_USERNAME
        msg_root['To'] = SMTP_USERNAME

        msg_alternative = MIMEMultipart('alternative')
        msg_root.attach(msg_alternative)

        # Embed images in HTML
        html_with_images = html_body
        for idx in range(len(chart_images)):
            html_with_images += f"<br><img src='cid:chart{idx+1}' style='max-width:100%; margin-top:20px;'>"

        msg_alternative.attach(MIMEText(html_with_images, 'html', 'utf-8'))

        for idx, base64_img in enumerate(chart_images):
            img_data = base64.b64decode(base64_img.split(',')[-1])
            img_part = MIMEImage(img_data)
            img_part.add_header('Content-ID', f'<chart{idx+1}>')
            msg_root.attach(img_part)

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg_root)

        logging.info("✅ Email sent with embedded charts")
    except Exception as e:
        logging.error("❌ Email sending failed", exc_info=True)

def generate_child_metrics():
    return [
        {"title": "Learning Preferences", "labels": ["Visual", "Auditory", "Kinesthetic"],
         "values": [random.randint(50, 70), random.randint(25, 40), random.randint(10, 30)]},
        {"title": "Study Engagement", "labels": ["Daily Review", "Group Study", "Independent Effort"],
         "values": [random.randint(40, 60), random.randint(20, 40), random.randint(30, 50)]},
        {"title": "Academic Confidence", "labels": ["Math", "Reading", "Focus & Attention"],
         "values": [random.randint(50, 85), random.randint(40, 70), random.randint(30, 65)]}
    ]

def generate_child_summary(age, gender, country, metrics):
    return [
        f"In {country}, many young {gender.lower()} children around the age of {age} are stepping into the early stages of learning with quiet determination and unique preferences. Among them, visual learning stands out as a powerful anchor — with {metrics[0]['values'][0]}% of learners gravitating toward images, colors, and story-based materials...",
        f"When we look deeper into how these children engage with their studies, a touching pattern emerges. {metrics[1]['values'][0]}% are already building the habit of daily review...",
        f"Confidence in core subjects reveals another meaningful insight. Math currently shines at {metrics[2]['values'][0]}%, Reading at {metrics[2]['values'][1]}%, and Focus & Attention at {metrics[2]['values'][2]}%...",
        "Together, these learning signals form more than a snapshot — they tell a story..."
    ]

def generate_summary_html(paragraphs):
    return "<div style='font-size:24px; font-weight:bold; margin-top:30px;'>🧠 Summary:</div><br>" + \
        "".join(f"<p style='line-height:1.7; font-size:16px; margin-bottom:16px;'>{p}</p>\n" for p in paragraphs)

def build_response(metrics, summary_paragraphs, chart_images):
    summary = generate_summary_html(summary_paragraphs)

    footer = """
    <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
      <strong>The insights in this report are generated by Katachat’s AI systems analyzing:</strong><br>
      1. Our proprietary database of anonymized learning patterns from SG, MY, and TW<br>
      2. Aggregated global educational trends from OpenAI and trusted datasets<br>
      <em>All data is processed under strict PDPA compliance.</em>
    </p>
    <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
      <strong>PS:</strong> Your personalized report will arrive in your inbox within 24 hours.
      You may WhatsApp or book a quick call to discuss further.
    </p>
    """
    return summary + footer

@app.route("/analyze_name", methods=["POST"])
def analyze_name():
    try:
        data = request.get_json(force=True)
        name = data.get("name", "").strip()
        chinese_name = data.get("chinese_name", "").strip()
        gender = data.get("gender", "").strip()
        country = data.get("country", "").strip()
        phone = data.get("phone", "").strip()
        email = data.get("email", "").strip()
        referrer = data.get("referrer", "").strip()
        chart_images = data.get("chart_images", [])

        month_str = str(data.get("dob_month")).strip()
        month = int(month_str) if month_str.isdigit() else datetime.strptime(month_str.capitalize(), "%B").month
        birthdate = datetime(int(data.get("dob_year")), month, int(data.get("dob_day")))
        age = datetime.today().year - birthdate.year - ((datetime.today().month, datetime.today().day) < (birthdate.month, birthdate.day))

        metrics = generate_child_metrics()
        summary = generate_child_summary(age, gender, country, metrics)
        html_result = build_response(metrics, summary, chart_images)

        email_html = f"""<html><body style="font-family:sans-serif;color:#333">
        <h2>🎯 New User Submission:</h2>
        <p>
        👤 <strong>Name:</strong> {name}<br>
        🈶 <strong>Chinese Name:</strong> {chinese_name}<br>
        ⚧️ <strong>Gender:</strong> {gender}<br>
        🎂 <strong>DOB:</strong> {birthdate.date()}<br>
        🕑 <strong>Age:</strong> {age}<br>
        🌍 <strong>Country:</strong> {country}<br>
        📞 <strong>Phone:</strong> {phone}<br>
        📧 <strong>Email:</strong> {email}<br>
        💬 <strong>Referrer:</strong> {referrer}
        </p>
        <hr><h2>📊 AI-Generated Report</h2>
        {html_result}
        </body></html>"""

        send_email_with_chart_links(email_html, chart_images)

        return jsonify({
            "metrics": metrics,
            "analysis": html_result
        })

    except Exception as e:
        logging.exception("❌ Error in /analyze_name")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
