# -*- coding: utf-8 -*-
import os, logging, smtplib, traceback
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import random

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insight Report",
        "report_title": "ðŸŽ‰ Global Identical Health Insights"
    }
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Full Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
        "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "language": "Language"
    }
}

def generate_child_metrics():
    return [
        {"title": "Learning Style", "labels": ["Visual", "Auditory", "Kinesthetic"], "values": random.sample(range(50, 71), 3)},
        {"title": "Study Habits", "labels": ["Group Study", "Daily Review", "Independent Study"], "values": random.sample(range(40, 61), 3)},
        {"title": "Core Focus", "labels": ["Math", "Reading", "Focus & Attention"], "values": random.sample(range(45, 76), 3)}
    ]

def generate_child_summary(age, gender, country, metrics):
    return [
        f"In {country}, many young {gender.lower()} children around the age of {age} are stepping into the early stages of learning with quiet determination and unique preferences. Among them, visual learning stands out as a powerful anchor â€” with {metrics[0]['values'][0]}% of learners gravitating toward images, colors, and story-based materials to make sense of the world around them. Auditory learning follows at {metrics[0]['values'][1]}%, and kinesthetic approaches like hands-on activities sit at {metrics[0]['values'][2]}%. These figures are not just numbers â€” they reflect the need to present information in ways that touch the heart and imagination of each child.",

        f"When we look deeper into how these children engage with their studies, a touching pattern emerges. {metrics[1]['values'][1]}% are already building the habit of daily review â€” a remarkable sign of discipline at such a young age. Meanwhile, {metrics[1]['values'][2]}% show strong signs of self-motivation when learning alone, a trait that speaks volumes about their inner drive. However, only {metrics[1]['values'][0]}% are regularly involved in group study, which may hint at a deeper emotional preference for solitude or sensitivity to peer dynamics.",

        f"Confidence in core subjects reveals another meaningful insight. Math currently shines the brightest at {metrics[2]['values'][0]}%, while Reading scores slightly higher at {metrics[2]['values'][1]}%. The Focus & Attention score at {metrics[2]['values'][2]}% suggests many of these learners are still mastering the art of sustained concentration. But instead of seeing this as a weakness, parents can view it as a developmental rhythm â€” one that simply needs the right melody to guide it. Emotional readiness and the right environment can create dramatic shifts in attention spans.",

        "Together, these learning signals form more than a snapshot â€” they tell a story. A story of young minds filled with potential, quietly hoping the adults around them will notice not just their results, but their efforts, moods, and learning preferences. Parents and educators in Singapore, Malaysia, and Taiwan now have the chance to craft truly child-centered support. Whether it's choosing tutors who adapt to visual needs, or finding school systems that value emotional growth as much as academic grades â€” this generation deserves our full presence, not just our performance goals."
    ]

def generate_summary_html(paragraphs):
    return "".join(f"<p>{p}</p>" for p in paragraphs)

def generate_email_charts(metrics):
    chart_html = ""
    for metric in metrics:
        bars = ""
        for label, value in zip(metric["labels"], metric["values"]):
            bars += f'''
                <div style="margin:6px 0;">
                  <strong>{label}:</strong> {value}%
                  <div style="background:#eee; border-radius:8px; overflow:hidden;">
                    <div style="width:{value}%; background:#5ab2f7; padding:6px 0; color:#fff; text-align:center;">
                      {value}%
                    </div>
                  </div>
                </div>
            '''
        chart_html += f"<h3>{metric['title']}</h3>{bars}<br>"
    return chart_html

def build_email_report(summary_html, charts_html):
    footer = '''
    <div style="margin-top: 40px;">
      <div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin-bottom:20px;">
        <strong>The insights in this report are generated by KataChatâ€™s AI systems analyzing:</strong><br />
        1. Our proprietary database of anonymized learning patterns from Singaporean, Malaysian and Taiwanese students (with parental consent)<br />
        2. Aggregated, non-personal educational trends from trusted third-party sources including OpenAIâ€™s research datasets<br />
        <em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance.</em>
      </div>
      <div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B;">
        <strong>PS:</strong> Your personalized report will arrive in your inbox within 24 hours.
        If youâ€™d like to explore the findings further, feel free to WhatsApp or book a quick 15-minute chat.
      </div>
    </div>
    '''
    return summary_html + charts_html + footer

@app.route("/analyze", methods=["POST"])
def analyze():
    try:
        data = request.get_json()
        age = int(data["age"])
        gender = data["gender"]
        country = data["country"]
        name = data["name"]
        email = data["email"]

        metrics = generate_child_metrics()
        summary_paragraphs = generate_child_summary(age, gender, country, metrics)
        summary_only_html = generate_summary_html(summary_paragraphs) + build_email_report("", "")
        charts_html = generate_email_charts(metrics)
        email_html_result = build_email_report(generate_summary_html(summary_paragraphs), charts_html)

        email_subject = "ðŸ“˜ Personalized Learning Report for Your Child"
        email_html = f"<html><body><h2>{email_subject}</h2>{email_html_result}</body></html>"

        send_email(email, email_subject, email_html)

        return jsonify({
            "metrics": metrics,
            "analysis": summary_only_html
        })

    except Exception as e:
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

def send_email(to, subject, html):
    msg = MIMEText(html, "html")
    msg["Subject"] = subject
    msg["From"] = SMTP_USERNAME
    msg["To"] = to

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.sendmail(SMTP_USERNAME, [to], msg.as_string())
