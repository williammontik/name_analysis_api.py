# -*- coding: utf-8 -*-
import os, re, smtplib, logging
from datetime import datetime
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import random

app = Flask(__name__)
CORS(app)
app.logger.setLevel(logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")


def send_email(html_body):
    subject = "New KataChatBot Submission"
    msg = MIMEText(html_body, 'html')
    msg["Subject"] = subject
    msg["From"] = SMTP_USERNAME
    msg["To"] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
        app.logger.info("‚úÖ HTML email sent successfully.")
    except Exception:
        app.logger.error("‚ùå Email sending failed.", exc_info=True)


def generate_child_metrics():
    return [
        {
            "title": "Learning Preferences",
            "labels": ["Visual", "Auditory", "Kinesthetic"],
            "values": [random.randint(40, 70), random.randint(20, 40), random.randint(10, 30)]
        },
        {
            "title": "Study Engagement",
            "labels": ["Daily Review", "Group Study", "Independent Effort"],
            "values": [random.randint(30, 60), random.randint(20, 50), random.randint(30, 60)]
        },
        {
            "title": "Academic Confidence",
            "labels": ["Math", "Reading", "Focus & Attention"],
            "values": [random.randint(40, 80), random.randint(40, 80), random.randint(30, 70)]
        }
    ]


def generate_child_summary(age, gender, country, metrics):
    tone_intro = f"In {country}, many {gender.lower()} children around the age of {age} are navigating their early learning years with diverse styles and habits. "
    return [
        f"{tone_intro}From our insights, a strong {metrics[0]['labels'][0].lower()} learning preference is evident, with {metrics[0]['values'][0]}% leaning toward this mode. "
        f"{metrics[0]['labels'][1]} and {metrics[0]['labels'][2]} preferences follow at {metrics[0]['values'][1]}% and {metrics[0]['values'][2]}%, respectively. "
        "This suggests a need for more image-rich, story-based teaching methods.",

        f"Study habits are also evolving. With {metrics[1]['values'][0]}% engaging in daily review and {metrics[1]['values'][2]}% showing independent effort, "
        f"we see resilience in their ability to cope with routines. However, group study lags behind at {metrics[1]['values'][1]}%, "
        "indicating an area where social learning could be nurtured further.",

        f"Confidence levels across subjects tell an important story: {metrics[2]['labels'][0]} leads with {metrics[2]['values'][0]}%, followed closely by "
        f"{metrics[2]['labels'][1]} at {metrics[2]['values'][1]}%. Yet, the {metrics[2]['labels'][2].lower()} metric, at {metrics[2]['values'][2]}%, "
        "hints at struggles with sustained attention or emotional readiness in class.",

        "By viewing these trends through a broader lens, we can better tailor support strategies‚Äîespecially for parents and educators in Singapore, Malaysia, and Taiwan‚Äî"
        "to help children grow confidently with balanced learning habits, emotional support, and structured environments."
    ]


def generate_child_summary_html(paragraphs):
    return "<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üß† Summary:</div><br>" + \
           "".join(f"<p style='line-height:1.7; font-size:16px; margin-bottom:16px;'>{p}</p>\n" for p in paragraphs)


def build_child_response_block(metrics, summary_paragraphs):
    summary_html = generate_child_summary_html(summary_paragraphs)
    footer_html = """
    <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
      <strong>The insights in this report are generated by Katachat‚Äôs AI systems analyzing:</strong><br>
      1. Our proprietary database of anonymized learning patterns from Singaporean, Malaysian and Taiwanese students (with parental consent)<br>
      2. Aggregated, non-personal educational trends from trusted third-party sources including OpenAI‚Äôs research datasets<br>
      <em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. Sample sizes vary by analysis, with minimum thresholds of 500+ data points for demographic comparisons.</em>
    </p>
    <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
      <strong>PS:</strong> We know you‚Äôre eager to receive a personalized report for your child. It‚Äôs on its way to your inbox and should arrive within 24 hours.
      If you have any questions, feel free to message us on WhatsApp and we‚Äôll get right back to you. We‚Äôre also happy to arrange a quick 15-minute phone call at your convenience.
    </p>
    """
    return summary_html + footer_html


@app.route("/analyze_name", methods=["POST"])
def analyze_name():
    try:
        data = request.get_json(force=True)
        app.logger.info(f"[analyze_name] payload: {data}")

        name = data.get("name", "").strip()
        gender = data.get("gender", "").strip()
        country = data.get("country", "").strip()
        phone = data.get("phone", "").strip()
        email_addr = data.get("email", "").strip()
        referrer = data.get("referrer", "").strip()

        # ‚úÖ FIXED: Parse month name or number correctly
        month_str = str(data.get("dob_month")).strip()
        if month_str.isdigit():
            month = int(month_str)
        else:
            month = datetime.strptime(month_str.capitalize(), "%B").month

        birthdate = datetime(int(data.get("dob_year")), month, int(data.get("dob_day")))

        # Age
        today = datetime.today()
        age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))

        # Generate report
        metrics = generate_child_metrics()
        summary = generate_child_summary(age, gender, country, metrics)
        html_result = build_child_response_block(metrics, summary)

        # Email content
        email_body = f"""<html><body style="font-family:sans-serif;color:#333">
        <h2>üéØ New User Submission:</h2>
        <p>
        üë§ <strong>Full Name:</strong> {name}<br>
        ‚ößÔ∏è <strong>Gender:</strong> {gender}<br>
        üéÇ <strong>DOB:</strong> {birthdate.date()}<br>
        üïë <strong>Age:</strong> {age}<br>
        üåç <strong>Country:</strong> {country}<br>
        üìû <strong>Phone:</strong> {phone}<br>
        üìß <strong>Email:</strong> {email_addr}<br>
        üí¨ <strong>Referrer:</strong> {referrer}
        </p>
        <hr>
        <h2>üìä AI-Generated Report</h2>
        {html_result}
        </body></html>"""

        send_email(email_body)

        return jsonify({
            "metrics": metrics,
            "analysis": html_result
        })

    except Exception as e:
        app.logger.exception("Error in /analyze_name")
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
