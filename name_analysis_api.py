# -*- coding: utf-8 -*-
import os, smtplib, logging, random, base64
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)
app.logger.setLevel(logging.DEBUG)

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

def send_email_with_charts(html_body, chart_images):
    try:
        msg_root = MIMEMultipart('related')
        msg_root['Subject'] = "New KatachatBot Submission"
        msg_root['From'] = SMTP_USERNAME
        msg_root['To'] = SMTP_USERNAME

        msg_alt = MIMEMultipart('alternative')
        msg_root.attach(msg_alt)
        msg_alt.attach(MIMEText(html_body, 'html', 'utf-8'))

        for idx, base64_img in enumerate(chart_images):
            try:
                if "," in base64_img:
                    _, encoded = base64_img.split(",", 1)
                else:
                    encoded = base64_img
                image_data = base64.b64decode(encoded)
                image = MIMEImage(image_data)
                cid = f"chart{idx+1}"
                image.add_header('Content-ID', f'<{cid}>')
                image.add_header('Content-Disposition', 'inline', filename=f"{cid}.png")
                msg_root.attach(image)
            except Exception as e:
                logging.warning(f"Chart {idx+1} failed to attach: {e}")

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg_root)
        logging.info("✅ Email sent with embedded charts")
    except Exception as e:
        logging.error("❌ Email sending failed", exc_info=True)

def generate_child_metrics():
    return [
        {
            "title": "Learning Preferences",
            "labels": ["Visual", "Auditory", "Kinesthetic"],
            "values": [random.randint(50, 70), random.randint(25, 40), random.randint(10, 30)]
        },
        {
            "title": "Study Engagement",
            "labels": ["Daily Review", "Group Study", "Independent Effort"],
            "values": [random.randint(40, 60), random.randint(20, 40), random.randint(30, 50)]
        },
        {
            "title": "Academic Confidence",
            "labels": ["Math", "Reading", "Focus & Attention"],
            "values": [random.randint(50, 85), random.randint(40, 70), random.randint(30, 65)]
        }
    ]

def generate_child_summary(age, gender, country, metrics):
    return [
        f"In {country}, many young {gender.lower()} children around the age of {age} are stepping into the early stages of learning with quiet determination. Visual learning leads at {metrics[0]['values'][0]}%, followed by auditory ({metrics[0]['values'][1]}%) and kinesthetic ({metrics[0]['values'][2]}%).",

        f"Study engagement reveals {metrics[1]['values'][0]}% do daily review and {metrics[1]['values'][2]}% prefer independent study. Only {metrics[1]['values'][1]}% engage in group study — suggesting a need for emotionally safe learning environments.",

        f"Confidence levels show Math at {metrics[2]['values'][0]}%, Reading at {metrics[2]['values'][1]}%, and Focus at {metrics[2]['values'][2]}%. These numbers guide how parents can nurture balanced academic growth.",

        "Together, these learning signals tell a story of potential, effort, and emotional nuance. With the right tools and attention, every child can thrive with balance and joy."
    ]

def generate_summary_html(paragraphs):
    return "<div style='font-size:24px; font-weight:bold; margin-top:30px;'>🧠 Summary:</div><br>" + \
        "".join(f"<p style='line-height:1.7; font-size:16px; margin-bottom:16px;'>{p}</p>\n" for p in paragraphs)

def build_response(metrics, summary_paragraphs, chart_images):
    summary = generate_summary_html(summary_paragraphs)

    charts_html = ""
    if chart_images:
        charts_html += "<div style='margin-top:30px;'><strong style='font-size:20px;'>📈 Chart Visualizations:</strong><br><br>"
        for idx in range(len(chart_images)):
            charts_html += f"<img src='cid:chart{idx+1}' style='width:100%;max-width:600px;margin-bottom:20px;border:1px solid #ccc;border-radius:8px;'><br>"
        charts_html += "</div>"

    footer = """
    <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
      <strong>The insights in this report are generated by Katachat’s AI systems analyzing:</strong><br>
      1. Our proprietary database of anonymized learning patterns from Singaporean, Malaysian and Taiwanese students (with parental consent)<br>
      2. Aggregated, non-personal educational trends from trusted third-party sources including OpenAI’s research datasets<br>
      <em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance.</em>
    </p>
    <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
      <strong>PS:</strong> Your personalized report will arrive in your inbox within 24 hours.
      If you’d like to explore the findings further, feel free to WhatsApp or book a quick 15-minute chat.
    </p>
    """
    return summary + charts_html + footer

@app.route("/analyze_name", methods=["POST"])
def analyze_name():
    try:
        data = request.get_json(force=True)
        logging.info(f"[analyze_name] Payload received")

        name = data.get("name", "").strip()
        chinese_name = data.get("chinese_name", "").strip()
        gender = data.get("gender", "").strip()
        country = data.get("country", "").strip()
        phone = data.get("phone", "").strip()
        email = data.get("email", "").strip()
        referrer = data.get("referrer", "").strip()
        chart_images = data.get("chart_images", [])

        month_str = str(data.get("dob_month")).strip()
        if month_str.isdigit():
            month = int(month_str)
        else:
            month = datetime.strptime(month_str.capitalize(), "%B").month

        birthdate = datetime(int(data.get("dob_year")), month, int(data.get("dob_day")))
        today = datetime.today()
        age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))

        metrics = generate_child_metrics()
        summary = generate_child_summary(age, gender, country, metrics)
        html_result = build_response(metrics, summary, chart_images)

        email_html = f"""<html><body style="font-family:sans-serif;color:#333">
        <h2>🎯 New User Submission:</h2>
        <p>
        👤 <strong>Full Name:</strong> {name}<br>
        🈶 <strong>Chinese Name:</strong> {chinese_name}<br>
        ⚧️ <strong>Gender:</strong> {gender}<br>
        🎂 <strong>DOB:</strong> {birthdate.date()}<br>
        🕑 <strong>Age:</strong> {age}<br>
        🌍 <strong>Country:</strong> {country}<br>
        📞 <strong>Phone:</strong> {phone}<br>
        📧 <strong>Email:</strong> {email}<br>
        💬 <strong>Referrer:</strong> {referrer}
        </p>
        <hr><h2>📊 AI-Generated Report</h2>
        {html_result}
        </body></html>"""

        send_email_with_charts(email_html, chart_images)

        return jsonify({
            "metrics": metrics,
            "analysis": html_result
        })

    except Exception as e:
        logging.exception("❌ Error in /analyze_name")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
